Component State Management
===========================================================================
const [sourceLanguage, setSourceLanguage] = useState('en');
const [targetLanguage, setTargetLanguage] = useState('es');
const [text, setText] = useState('');
const [translatedText, setTranslatedText] = useState('');
const [loading, setLoading] = useState(false);
sourceLanguage: Stores the selected source language code.
targetLanguage: Stores the selected target language code.
text: Stores the text input by the user for translation.
translatedText: Stores the translated text received from the API.
loading: A boolean flag to indicate whether the translation process is in progress.




Handling the Translation Process
===========================================================================

const handleTranslate = async () => {
    setLoading(true);
    const encodedParams = new URLSearchParams();
    encodedParams.append("source_language", sourceLanguage);
    encodedParams.append("target_language", targetLanguage);
    encodedParams.append("text", text);

    try {
        const response = await axios({
            method: 'POST',
            url: 'https://text-translator2.p.rapidapi.com/translate',
            headers: {
                'content-type': 'application/x-www-form-urlencoded',
                'X-RapidAPI-Key': 'b8bb314eb8msh5bcb832919161fdp12af72jsn4c6c655daa90',
                'X-RapidAPI-Host': 'text-translator2.p.rapidapi.com'
            },
            data: encodedParams.toString(),
        });

        setTranslatedText(response.data.data.translatedText);
    } catch (error) {
        console.error('Error translating text:', error);
    }
    setLoading(false);
};

setLoading(true): Sets the loading state to true to indicate the translation process has started.
encodedParams: A URLSearchParams object to hold the parameters for the API request. This includes the source language, target language, and the text to be translated.
axios: Makes a POST request to the translation API with the necessary headers and data.
method: Specifies the HTTP method as POST.
url: The endpoint for the translation API.
headers: Includes the content type and API key for authentication.
data: The encoded parameters as a URL-encoded string.
setTranslatedText: Updates the state with the translated text received from the API.
setLoading(false): Resets the loading state to false after the translation process is complete.





URLSearchParams and encodedParams
===============================================================================================
The URLSearchParams interface defines utility methods to work with the query string of a URL. In our case, it's used to format the parameters for the API request in a way that the API expects.

Creating encodedParams
javascript
Copy code
const encodedParams = new URLSearchParams();
new URLSearchParams(): This creates a new instance of the URLSearchParams object. This object allows us to append key-value pairs which will be automatically URL-encoded when sent in the request.
Appending Parameters
javascript
Copy code
encodedParams.append("source_language", sourceLanguage);
encodedParams.append("target_language", targetLanguage);
encodedParams.append("text", text);
append() method: Adds a specified key/value pair as a new search parameter. This method encodes the values so that they are safe to include in a URL query string.
Let's break down each parameter:

source_language:

Key: "source_language"
Value: sourceLanguage (the state value for the selected source language code, e.g., 'en' for English)
target_language:

Key: "target_language"
Value: targetLanguage (the state value for the selected target language code, e.g., 'es' for Spanish)
text:

Key: "text"
Value: text (the state value containing the text that the user wants to translate)
These parameters are required by the translation API to process the translation request. By appending these key-value pairs to the encodedParams object, we ensure that they are correctly formatted for the POST request.

Using encodedParams in the Axios Request
javascript
Copy code
const response = await axios({
    method: 'POST',
    url: 'https://text-translator2.p.rapidapi.com/translate',
    headers: {
        'content-type': 'application/x-www-form-urlencoded',
        'X-RapidAPI-Key': 'b8bb314eb8msh5bcb832919161fdp12af72jsn4c6c655daa90',
        'X-RapidAPI-Host': 'text-translator2.p.rapidapi.com'
    },
    data: encodedParams.toString(),
});
method: 'POST': Specifies that we are making a POST request.
url: The endpoint for the translation API.
headers:
'content-type': 'application/x-www-form-urlencoded': Specifies the content type of the request body.
'X-RapidAPI-Key': The API key for authentication.
'X-RapidAPI-Host': The host name for the API.
data: encodedParams.toString(): Converts the encodedParams object to a URL-encoded string format, which is then sent as the body of the POST request.
Summary
URLSearchParams: Used to create and manage URL-encoded parameters.
append() method: Adds key-value pairs to the encodedParams object.
encodedParams.toString(): Converts the parameters to a URL-encoded string for inclusion in the request body.
This approach ensures that the parameters are correctly formatted and encoded for the API to process the translation request accurately.